// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

namespace Spookify
{
	public partial class ConfigViewController : UIViewController
	{
		public ConfigViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			LoginButton.Layer.CornerRadius = 10; // this value vary as per your desire
			LoginButton.ClipsToBounds = true;

			RefreshButton.Layer.CornerRadius = 10; // this value vary as per your desire
			RefreshButton.ClipsToBounds = true;
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			this.SwapURLSwitch.On = CurrentSettings.Current.kTokenSwapService;
			this.RefreshURLSwitch.On = CurrentSettings.Current.kTokenRefreshService;

			var appVersionString = NSBundle.MainBundle.ObjectForInfoDictionary("CFBundleShortVersionString");
			var appBuildString = NSBundle.MainBundle.ObjectForInfoDictionary("CFBundleVersion");

			this.VersionLabel.Text = string.Format("Â© 2016 Markus Fischer, Version {0} ({1})",appVersionString,appBuildString);

			UpdateStatus ();
		}

		void UpdateStatus()
		{
			this._StatusRefreshLabel.Text = string.Format ("Session: {0}  Expiration: {1}",
				CurrentPlayer.Current.AuthPlayer.Session.IsValid ? "valid" : (CurrentPlayer.Current.TriggerWaitingForSessionRenew ? "renew pending" : "invalid"),
				CurrentPlayer.Current.AuthPlayer.Session.ExpirationDate.NSDateToDateTime ().ToString("G")
			);
			var player = CurrentPlayer.Current.RawPlayer;
			if (player == null)
				this._StatusSwapLabel.Text = "no player";
			else {
				this._StatusSwapLabel.Text = string.Format ("Player created, {0}, {1}",
					player.LoggedIn ? "logged in" : (CurrentPlayer.Current.TriggerWaitingForLogin ? "login pending" : "not logged in"),
					player.IsPlaying ? "playing" : "not playing");
			}
		}

		partial void ValueChanged (Foundation.NSObject sender)
		{
			CurrentSettings.Current.kTokenSwapService = this.SwapURLSwitch.On;
			CurrentSettings.Current.kTokenRefreshService = this.RefreshURLSwitch.On;
			CurrentSettings.Current.StoreCurrentSettings();
			UpdateStatus ();
		}

		partial void LoginClicked (UIKit.UIButton sender)
		{
			var c = CurrentPlayer.Current;
			c.CreateNewSPTAuth();
			c.OpenLoginPage(this);
			UpdateStatus ();
		}

		partial void RenewSessionClicked (UIKit.UIButton sender)
		{
			var c = CurrentPlayer.Current;
			c.RenewSession();
			UpdateStatus ();
		}
	}
}
