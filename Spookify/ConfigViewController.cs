// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using SpotifySDK;
using System.IO;
using CoreAnimation;
using CoreGraphics;

namespace Spookify
{
	public partial class ConfigViewController : UIViewController
	{
		public ConfigViewController (IntPtr handle) : base (handle)
		{
		}
		CAGradientLayer _bottomGradientLayer;
		CAGradientLayer _topGradientLayer;

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.LogoutButton.Layer.BorderColor = UIColor.LightGray.CGColor;
			this.LogoutButton.Layer.BorderWidth = 0.5f;
			this.LogoutButton.Layer.CornerRadius = 5;

			_bottomGradientLayer = new CAGradientLayer () {
				Frame = this.InfoTextBottomTransaprentView.Bounds,
				Colors = new [] { UIColor.Clear.CGColor, ConfigSpookify.BackgroundColor.CGColor },
				StartPoint = new CGPoint (0.0f, 0.0f),
				EndPoint = new CGPoint (0.0f, 1.0f)
			};
			this.InfoTextBottomTransaprentView.Layer.Mask = _bottomGradientLayer;
			_topGradientLayer = new CAGradientLayer () {
				Frame = this.InfoTextTopTransaprentView.Bounds,
				Colors = new [] { UIColor.Clear.CGColor, ConfigSpookify.BackgroundColor.CGColor },
				StartPoint = new CGPoint (0.0f, 1.0f),
				EndPoint = new CGPoint (0.0f, 0.0f)
			};
			this.InfoTextTopTransaprentView.Layer.Mask = _topGradientLayer;
			TextLabel.Text = Info;
		}
		public override void ViewDidLayoutSubviews ()
		{
			base.ViewDidLayoutSubviews ();
			_bottomGradientLayer.Frame = this.InfoTextBottomTransaprentView.Bounds;
			_topGradientLayer.Frame = this.InfoTextTopTransaprentView.Bounds;
		}
		partial void LogoutClicked (UIKit.UIButton sender)
		{
			var p = CurrentPlayer.Current;
			if (p != null &&
				p.AuthPlayer != null) {
				p.SessionDisabled = true;
				// Cookies weg
				var avc = SPTAuthViewController.AuthenticationViewControllerWithAuth (p.AuthPlayer);
				avc.ClearCookies(() => { BeginInvokeOnMainThread(UpdateStatus); });

				try {
					var cookies = Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments);
					int pos = cookies.LastIndexOf('/');
					if (pos != -1) {
						cookies = cookies.Substring(0,pos+1);
						cookies += "Library/Cookies/Spookify.consultdot.net.binarycookies";
						if (File.Exists(cookies))
							File.Delete(cookies);
					}
				} catch (Exception ex) {
					Console.WriteLine("Could not delete Cookie: "+ex.Message);
				}
				// Player abmelden
				if (p.RawPlayer != null) {
					try {
						if (p.RawPlayer.IsPlaying) {
							p.RawPlayer.Stop((error) => { 
								BeginInvokeOnMainThread( () => {
									UpdateStatus();
									if (p.RawPlayer.LoggedIn) {
										p.RawPlayer.Logout((errorLogout) => { 
											p.ResetPlayer(); 
											p.ClearAuthPlayer();
											BeginInvokeOnMainThread(UpdateStatus); 
										});
									}
								}); 
							});
						}
						else {
							if (p.RawPlayer.LoggedIn) {
								p.RawPlayer.Logout((errorLogout) => { 
									p.ResetPlayer(); 
									p.ClearAuthPlayer();
									BeginInvokeOnMainThread(UpdateStatus); 
								});
							}
						}
					} 
					catch (Exception ex)
					{

					}
				}
				else {
					p.ClearAuthPlayer();
				}
			}
			UIAlertController ac = UIAlertController.Create("Abmelden","Sie wurden von Spotify abgemeldet",UIAlertControllerStyle.Alert);
			ac.AddAction(UIAlertAction.Create ("Ok", UIAlertActionStyle.Default, (alertAction) =>  {
				ac.Dispose ();
				BeginInvokeOnMainThread(UpdateStatus); 
			}));
			this.PresentViewController(ac, true, null);		
		}
		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			var appVersionString = NSBundle.MainBundle.ObjectForInfoDictionary("CFBundleShortVersionString");
			var appBuildString = NSBundle.MainBundle.ObjectForInfoDictionary("CFBundleVersion");

			this.VersionLabel.Text = string.Format("© 2016 Markus Fischer, Version {0} ({1})",appVersionString,appBuildString);
			UpdateStatus ();
		}

		void UpdateStatus()
		{
			if (CurrentPlayer.Current.AuthPlayer != null &&
			    CurrentPlayer.Current.AuthPlayer.Session != null) {
				this._StatusRefreshLabel.Text = string.Format ("Session: {0}  Expiration: {1}",
					CurrentPlayer.Current.AuthPlayer.Session.IsValid ? "valid" : (CurrentPlayer.Current.TriggerWaitingForSessionRenew ? "renew pending" : "invalid"),
					CurrentPlayer.Current.AuthPlayer.Session.ExpirationDate != null 
						? CurrentPlayer.Current.AuthPlayer.Session.ExpirationDate.NSDateToDateTime ().ToString ("G")
						: "-"
				);
			} else
				this._StatusRefreshLabel.Text = "no Session";
			
			var player = CurrentPlayer.Current.RawPlayer;
			if (player == null)
				this._StatusSwapLabel.Text = "no player";
			else {
				this._StatusSwapLabel.Text = string.Format ("Player created, {0}, {1}",
					player.LoggedIn ? "logged in" : (CurrentPlayer.Current.TriggerWaitingForLogin ? "login pending" : "not logged in"),
					player.IsPlaying ? "playing" : "not playing");
			}
		}

		public string Info = @"
Hörbücher bei Spotify finden und anhören. 

Die Idee zu Bookify kam mir, als ich versuchte ein Hörbuch bei Spotify bei einer Schitour anzuhören - die Spotify iOS App hat die Kapitel geshuffelt und ich war oben völlig verwirrt. So konnte es nicht weiter gehen, eine Lösung musste her...hier ist sie...leider ohne offline Funktionaltität, denn dies bietet die API von Spotify nicht an.

Impressum:
Fischer & Schaefers GbR
Stollbergstrasse 6
80539 München
E-Mail: gbr @ consultdot.net 

Geschäftsführende Gesellschafter:
Bernhard Schaefers, Markus Fischer

Fischer & Schaefers GbR ist eine Gesellschaft bürgerlichen Rechts mit Sitz in München

Umsatzsteuer-ID-Nr.: DE243564719

Haftungsbeschränkung:

Die Inhalte der App wurden mit größtmöglicher Sorgfalt und nach bestem Gewissen erstellt. Dennoch übernimmt der Anbieter der App keine Gewähr für die Aktualität, Vollständigkeit und Richtigkeit der bereitgestellten Inhalte.

Die meisten Inhalte dieser App, insbesondere Texte, Bilder und Audioinhalte, stammen von Spotify, Inhaltsangaben der Bücher stammen von google (Google Books API). Für die Inhalte und Richtigkeit der bereitgestellten Informationen ist der jeweilige Anbieter der Daten verantwortlich.

Externe Links:

Die App enthält sog. „externe Links“ (Verlinkungen) zu anderen Webseiten, auf deren Inhalt der Anbieter der App - also ich - keinen Einfluss hat. Aus diesem Grund kann der Anbieter für diese Inhalte auch keine Gewähr übernehmen.
Für die Inhalte und Richtigkeit der bereitgestellten Informationen ist der jeweilige Anbieter der verlinkten Webseite verantwortlich. Zum Zeitpunkt der Verlinkung waren keine Rechtsverstöße erkennbar. Bei Bekanntwerden einer solchen Rechtsverletzung wird der Link umgehend entfernen.

Urheberrecht/Leistungsschutzrecht:

Die in diese App veröffentlichten Inhalte, Werke und bereitgestellten Informationen unterliegen dem deutschen Urheberrecht und Leistungsschutzrecht. Jede Art der Vervielfältigung, Bearbeitung, Verbreitung, Einspeicherung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechts bedarf der vorherigen schriftlichen Zustimmung des jeweiligen Rechteinhabers.

";
	}
}
